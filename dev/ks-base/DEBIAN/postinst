#!/bin/bash

set -e

. /usr/share/debconf/confmodule


if [ "$1" != "triggered" ]; then
    # Get sysname
    db_get ks-base/sysname
    sysname="$RET"
    if [ "$sysname" == "other" ]; then
        >&2 echo "W: You've declared that the system you're installing is not in the current list of supported systems."
        >&2 echo "   This may yield unexpected results. Proceeding with the install, but some packages may fail."
    fi

    # Get primary user
    db_get ks-base/primary-user
    user="$RET"
    if [ -z "$user" ]; then
        >&2 echo "E: Primary user not set. Can't continue."
        exit 10
    fi

    # Get home directory
    db_get ks-base/primary-user-home
    home="$RET"
    if [ -z "$home" ]; then
        >&2 echo "E: Primary user home directory not set. Can't continue."
        exit 11
    fi

    # Get the mountpoint
    db_get ks-base/mountpoint
    MOUNTPOINT="$RET"

    # Make sure mountpoint exists and has correct ownership
    if [ ! -d "$MOUNTPOINT" ]; then
        if [ -L "$MOUNTPOINT" ]; then
            >&2 echo "E: '$MOUNTPOINT' points to a bad symlink. Not sure what to do."
            exit 1
        fi
        mkdir -p "$MOUNTPOINT"
    fi


    # Make sure mountpoint is set up in fstab or systemd (if not root)
    if [ "$MOUNTPOINT" != "/" ]; then
        gmnt="$(echo "$MOUNTPOINT" | sed 's#/$##')"
        if ! egrep -wq "$gmnt/*" /etc/fstab; then
            sysdmount="$(echo "$MOUNTPOINT" | sed -r 's#(^/|/$)##g' | sed 's#/#-#g').mount"
            if ! systemctl list-units | grep -Fq "$sysdmount"; then
                >&2 echo "E: Looks like mountpoint is not set up in fstab or systemd. You MUST set up and mount your data"
                >&2 echo "   partition at '$MOUNTPOINT' before continuing."
                exit 2
            fi
        fi

        # Make sure mountpoint is mounted
        if ! mount | grep -wq "$gmnt"; then
            >&2 echo "E: You MUST MOUNT your data partition at '$MOUNTPOINT'"
            >&2 echo "   before continuing"
            exit 8
        fi
    fi


    # Get the filebase 
    db_get ks-base/filebase
    FILEBASE="$RET"

    # Make sure it's not root
    if [ "$FILEBASE" == "/" ]; then
        >&2 echo "E: Filebase set to '/'. This cannot be. Manual intervention required."
        exit 3
    fi


    # Make sure filebase exists and has correct ownership
    if [ ! -d "$FILEBASE" ]; then
        if [ -L "$FILEBASE" ]; then
            >&2 echo "E: '$FILEBASE' points to a bad symlink. Not sure what to do."
            exit 1
        fi
        mkdir -p "$FILEBASE"
        chown "$user:$user" "$FILEBASE"
    fi


    # Make sure synced folders are created at filebase
    db_get ks-base/synced-dirs
    eval "synced=($RET)"
    for d in "${synced[@]}"; do
        if [ ! -e "$FILEBASE/$d" ]; then
            mkdir -p "$FILEBASE/$d"
        fi
    done


    # Make sure home directories are properly linked
    db_get ks-base/linked-dirs
    eval "linked=($RET)"
    DIRTY="false"
    for d in "${linked[@]}"; do
        if [ ! -L "$home/$d" ]; then
            if [ -d "$home/$d" ]; then
                if [ "$(ls -A "$home/$d" | wc -l)" -gt 0 ]; then
                    DIRTY="true"
                    >&2 echo "E: Directory '$home/$d' already exists and has files in it."
                    >&2 echo "   You must clean this up before proceeding with the install."
                else
                    rmdir "$home/$d"
                fi
            fi
        fi
        ln -snf "$FILEBASE/$d" "$home/"
    done

    if [ "$DIRTY" == "true" ]; then
        exit 4
    fi
fi

