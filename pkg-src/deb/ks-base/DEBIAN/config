#!/bin/bash

set -e

. /usr/share/debconf/confmodule


# Primary user
db_get ks-base/primary-user
primary_user="$RET"
if [ -z "$primary_user" ]; then
    if [ -n "$SUDO_USER" ]; then
        primary_user="$SUDO_USER"
    elif [ -n "$USER" ] && [ "$USER" != "root" ]; then
        primary_user="$USER"
    fi

    if [ -n "$primary_user" ]; then
        db_set ks-base/primary-user "$primary_user"
    else
        err=
        tries=0
        pass="false"
        while [ "$pass" == "false" ]; do
            if [ -n "$err" ]; then
                db_subst ks-base/primary-user ERROR "$err"
            fi
            db_input high ks-base/primary-user || true
            db_go || true

            db_get ks-base/primary-user
            primary_user="$RET"

            if [ -z "$primary_user" ]; then
                err="ERROR: Primary user cannot be blank"
            else
                pass="true"
            fi

            !((tries++))

            if [ "$tries" -ge 4 ]; then
                >&2 echo "W: Caught in a loop getting primary user. Bailing, but there may be problems."
                pass="true"
            fi
        done
    fi
fi


# Primary user home
db_get ks-base/primary-user-home
primary_user_home="$RET"
if [ -z "$primary_user_home" ]; then
    if [ -n "$primary_user" ]; then
        if [ -d "/home/$primary_user" ]; then
            db_set ks-base/primary-user-home "/home/$primary_user"
        else
            db_input high ks-base/primary-user-home || true
        fi
    else
        db_input high ks-base/primary-user-home || true
    fi
    db_go || true

    db_get ks-base/primary-user-home || true
    primary_user_home="$RET"
fi




# Sysname
db_input high ks-base/sysname || true
db_go || true
db_get ks-base/sysname || true
sysname="$RET"

# If the sysname is 'other', we want to make sure to ask again
if [ "$sysname" == "other" ]; then
    db_fset ks-base/sysname seen false
fi



# Get filebase (with error checking)
err=
passed="false"
loops=0
while [ "$passed" == "false" ]; do
    if [ -n "$err" ]; then
        db_subst ks-base/filebase ERROR "$err"
    fi

    db_input high ks-base/filebase || true
    db_go || true

    db_get ks-base/filebase
    FILEBASE="$(echo "$RET" | sed "s#~#$primary_user_home#")"

    if [ "$FILEBASE" == "/" ]; then
        err="ERROR: Your filebase is set as '/'. This cannot be."
        db_fset ks-base/filebase seen false
    else
        passed="true"
        if [ "$FILEBASE" != "$RET" ]; then
            db_set ks-base/filebase "$FILEBASE"
        fi
    fi

    # If we see we're just looping, we're probably caught. Just bail.
    if [ "$loops" -ge 4 ]; then
        >&2 echo "W: Caught in a loop getting filebase. Bailing, but there may be problems."
        passed="true"
    fi
    !((loops++))
done

# Set mountpoint based on filebase, if possible (and if not already set)
IDENTIFIED_MOUNTPOINT=
if [ -d "$FILEBASE" ]; then
    db_get ks-base/mountpoint
    MOUNTPOINT="$RET"
    if [ -z "$MOUNTPOINT" ]; then
        IDENTIFIED_MOUNTPOINT="$(df "$FILEBASE" | sed '2q;d' | sed -r 's/^[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +(.+)$/\1/')"
        db_set ks-base/mountpoint "$IDENTIFIED_MOUNTPOINT"
    fi
fi



# Get mountpoint (Currently no possible error conditions identified, so no error checking)
db_subst ks-base/mountpoint ERROR "Based on your file root, it looks like your mountpoint is '$IDENTIFIED_MOUNTPOINT'"
db_input high ks-base/mountpoint || true
db_go || true

db_get ks-base/mountpoint
MOUNTPOINT="$(echo "$RET" | sed "s#~#$primary_user_home#")"
if [ "$MOUNTPOINT" != "$RET" ]; then
    db_set ks-base/mountpoint "$MOUNTPOINT"
fi




db_input high ks-base/linked-dirs || true
db_input high ks-base/synced-dirs || true
db_go || true

